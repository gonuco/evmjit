/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_NvmJITJNI = NULL;
    jmethodID director_method_ids[3];
  }
}

#include "NvmJIT.h"


typedef unsigned char ByteArray;

SWIGINTERN ByteArray *new_ByteArray(int nelements){
  return new unsigned char[nelements]();
}
SWIGINTERN void delete_ByteArray(ByteArray *self){
  delete [] self;
}
SWIGINTERN unsigned char ByteArray_getitem(ByteArray *self,int index){
  return self[index];
}
SWIGINTERN void ByteArray_setitem(ByteArray *self,int index,unsigned char value){
  self[index] = value;
}
SWIGINTERN unsigned char *ByteArray_cast(ByteArray *self){
  return self;
}
SWIGINTERN ByteArray *ByteArray_frompointer(unsigned char *t){
  return (ByteArray *) t;
}

#include <stdint.h>		// Use the C99 official header



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "NvmJIT_wrap.h"

SwigDirector_Callback::SwigDirector_Callback(JNIEnv *jenv) : Callback(), Swig::Director(jenv) {
}

SwigDirector_Callback::~SwigDirector_Callback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_Callback::doQuery(evm_variant *result, enum evm_query_key key, evm_variant const *arg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jresult = 0 ;
  jint jkey  ;
  jlong jarg = 0 ;
  
  if (!swig_override[0]) {
    Callback::doQuery(result,key,arg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((evm_variant **)&jresult) = (evm_variant *) result; 
    jkey = (jint) key;
    *((evm_variant **)&jarg) = (evm_variant *) arg; 
    jenv->CallStaticVoidMethod(Swig::jclass_NvmJITJNI, Swig::director_method_ids[0], swigjobj, jresult, jkey, jarg);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::doQuery ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_Callback::doUpdate(enum evm_update_key key, evm_variant const *arg1, evm_variant const *arg2) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jkey  ;
  jlong jarg1 = 0 ;
  jlong jarg2 = 0 ;
  
  if (!swig_override[1]) {
    Callback::doUpdate(key,arg1,arg2);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jkey = (jint) key;
    *((evm_variant **)&jarg1) = (evm_variant *) arg1; 
    *((evm_variant **)&jarg2) = (evm_variant *) arg2; 
    jenv->CallStaticVoidMethod(Swig::jclass_NvmJITJNI, Swig::director_method_ids[1], swigjobj, jkey, jarg1, jarg2);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::doUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

int64_t SwigDirector_Callback::doCall(enum evm_call_kind kind, int64_t gas, evm_uint160be const *address, evm_uint256be const *value, uint8_t const *input, size_t input_size, uint8_t *output, size_t output_size) {
  int64_t c_result = SwigValueInit< int64_t >() ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jkind  ;
  jlong jgas  ;
  jlong jaddress = 0 ;
  jlong jvalue = 0 ;
  jlong jinput = 0 ;
  jlong jinput_size  ;
  jlong joutput = 0 ;
  jlong joutput_size  ;
  
  if (!swig_override[2]) {
    return Callback::doCall(kind,gas,address,value,input,input_size,output,output_size);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jkind = (jint) kind;
    jgas = (jlong) gas;
    *((evm_uint160be **)&jaddress) = (evm_uint160be *) address; 
    *((evm_uint256be **)&jvalue) = (evm_uint256be *) value; 
    *((uint8_t **)&jinput) = (uint8_t *) input; 
    jinput_size = (jlong) input_size;
    *((uint8_t **)&joutput) = (uint8_t *) output; 
    joutput_size = (jlong) output_size;
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_NvmJITJNI, Swig::director_method_ids[2], swigjobj, jkind, jgas, jaddress, jvalue, jinput, jinput_size, joutput, joutput_size);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = (int64_t)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Callback::doCall ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_Callback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "doQuery", "(Lcom/nuco/nvmjit/evm_variant;Lcom/nuco/nvmjit/evm_query_key;Lcom/nuco/nvmjit/evm_variant;)V", NULL 
    },
    {
      "doUpdate", "(Lcom/nuco/nvmjit/evm_update_key;Lcom/nuco/nvmjit/evm_variant;Lcom/nuco/nvmjit/evm_variant;)V", NULL 
    },
    {
      "doCall", "(Lcom/nuco/nvmjit/evm_call_kind;JLcom/nuco/nvmjit/evm_uint160be;Lcom/nuco/nvmjit/evm_uint256be;Lcom/nuco/nvmjit/SWIGTYPE_p_unsigned_char;JLcom/nuco/nvmjit/SWIGTYPE_p_unsigned_char;J)J", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/nuco/nvmjit/Callback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 3; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_delete_1Callback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Callback *arg1 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Callback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1doQuery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  evm_variant *arg2 = (evm_variant *) 0 ;
  enum evm_query_key arg3 ;
  evm_variant *arg4 = (evm_variant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  arg2 = *(evm_variant **)&jarg2; 
  arg3 = (enum evm_query_key)jarg3; 
  arg4 = *(evm_variant **)&jarg4; 
  (arg1)->doQuery(arg2,arg3,(evm_variant const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1doQuerySwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  evm_variant *arg2 = (evm_variant *) 0 ;
  enum evm_query_key arg3 ;
  evm_variant *arg4 = (evm_variant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  arg2 = *(evm_variant **)&jarg2; 
  arg3 = (enum evm_query_key)jarg3; 
  arg4 = *(evm_variant **)&jarg4; 
  (arg1)->Callback::doQuery(arg2,arg3,(evm_variant const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1doUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  enum evm_update_key arg2 ;
  evm_variant *arg3 = (evm_variant *) 0 ;
  evm_variant *arg4 = (evm_variant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  arg2 = (enum evm_update_key)jarg2; 
  arg3 = *(evm_variant **)&jarg3; 
  arg4 = *(evm_variant **)&jarg4; 
  (arg1)->doUpdate(arg2,(evm_variant const *)arg3,(evm_variant const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1doUpdateSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Callback *arg1 = (Callback *) 0 ;
  enum evm_update_key arg2 ;
  evm_variant *arg3 = (evm_variant *) 0 ;
  evm_variant *arg4 = (evm_variant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Callback **)&jarg1; 
  arg2 = (enum evm_update_key)jarg2; 
  arg3 = *(evm_variant **)&jarg3; 
  arg4 = *(evm_variant **)&jarg4; 
  (arg1)->Callback::doUpdate(arg2,(evm_variant const *)arg3,(evm_variant const *)arg4);
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1doCall(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  Callback *arg1 = (Callback *) 0 ;
  enum evm_call_kind arg2 ;
  int64_t arg3 ;
  evm_uint160be *arg4 = (evm_uint160be *) 0 ;
  evm_uint256be *arg5 = (evm_uint256be *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  size_t arg7 ;
  uint8_t *arg8 = (uint8_t *) 0 ;
  size_t arg9 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Callback **)&jarg1; 
  arg2 = (enum evm_call_kind)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = *(evm_uint160be **)&jarg4; 
  arg5 = *(evm_uint256be **)&jarg5; 
  arg6 = *(uint8_t **)&jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = *(uint8_t **)&jarg8; 
  arg9 = (size_t)jarg9; 
  result = (int64_t)(arg1)->doCall(arg2,arg3,(evm_uint160be const *)arg4,(evm_uint256be const *)arg5,(uint8_t const *)arg6,arg7,arg8,arg9);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1doCallSwigExplicitCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  Callback *arg1 = (Callback *) 0 ;
  enum evm_call_kind arg2 ;
  int64_t arg3 ;
  evm_uint160be *arg4 = (evm_uint160be *) 0 ;
  evm_uint256be *arg5 = (evm_uint256be *) 0 ;
  uint8_t *arg6 = (uint8_t *) 0 ;
  size_t arg7 ;
  uint8_t *arg8 = (uint8_t *) 0 ;
  size_t arg9 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Callback **)&jarg1; 
  arg2 = (enum evm_call_kind)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = *(evm_uint160be **)&jarg4; 
  arg5 = *(evm_uint256be **)&jarg5; 
  arg6 = *(uint8_t **)&jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = *(uint8_t **)&jarg8; 
  arg9 = (size_t)jarg9; 
  result = (int64_t)(arg1)->Callback::doCall(arg2,arg3,(evm_uint160be const *)arg4,(evm_uint256be const *)arg5,(uint8_t const *)arg6,arg7,arg8,arg9);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_new_1Callback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Callback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Callback *)new SwigDirector_Callback(jenv);
  *(Callback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Callback *obj = *((Callback **)&objarg);
  (void)jcls;
  SwigDirector_Callback *director = dynamic_cast<SwigDirector_Callback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_Callback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Callback *obj = *((Callback **)&objarg);
  SwigDirector_Callback *director = dynamic_cast<SwigDirector_Callback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jboolean JNICALL Java_com_nuco_nvmjit_NvmJITJNI_isCompiled(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  enum evm_mode arg1 ;
  evm_uint256be arg2 ;
  evm_uint256be *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (enum evm_mode)jarg1; 
  argp2 = *(evm_uint256be **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null evm_uint256be");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)isCompiled(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_compileCode(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  enum evm_mode arg1 ;
  evm_uint256be arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  size_t arg4 ;
  evm_uint256be *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (enum evm_mode)jarg1; 
  argp2 = *(evm_uint256be **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null evm_uint256be");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(uint8_t **)&jarg3; 
  arg4 = (size_t)jarg4; 
  compileCode(arg1,arg2,(unsigned char const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1instances_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< evm_instance * > arg2 ;
  std::stack< evm_instance * > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  argp2 = *(std::stack< evm_instance * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::stack< evm_instance * >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->instances = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1instances_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< evm_instance * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  result =  ((arg1)->instances);
  *(std::stack< evm_instance * > **)&jresult = new std::stack< evm_instance * >((const std::stack< evm_instance * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1callbacks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< Callback * > *arg2 = (std::stack< Callback * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  arg2 = *(std::stack< Callback * > **)&jarg2; 
  if (arg1) (arg1)->callbacks = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1callbacks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< Callback * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  result = (std::stack< Callback * > *)& ((arg1)->callbacks);
  *(std::stack< Callback * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1maxMemSizes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< int64_t > arg2 ;
  std::stack< int64_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  argp2 = *(std::stack< int64_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::stack< int64_t >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->maxMemSizes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1maxMemSizes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< int64_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  result =  ((arg1)->maxMemSizes);
  *(std::stack< int64_t > **)&jresult = new std::stack< int64_t >((const std::stack< int64_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1curMemSizes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< int64_t * > arg2 ;
  std::stack< int64_t * > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  argp2 = *(std::stack< int64_t * > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::stack< int64_t * >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->curMemSizes = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1curMemSizes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_env *arg1 = (evm_env *) 0 ;
  std::stack< int64_t * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  result =  ((arg1)->curMemSizes);
  *(std::stack< int64_t * > **)&jresult = new std::stack< int64_t * >((const std::stack< int64_t * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1interrupted_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  evm_env *arg1 = (evm_env *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->interrupted = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1env_1interrupted_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  evm_env *arg1 = (evm_env *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  result = (bool) ((arg1)->interrupted);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_new_1evm_1env(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  evm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (evm_env *)new evm_env();
  *(evm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_delete_1evm_1env(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  evm_env *arg1 = (evm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(evm_env **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_createEnv(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  evm_env *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (evm_env *)createEnv();
  *(evm_env **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_createVM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  evm_env *arg1 = (evm_env *) 0 ;
  Callback *arg2 = (Callback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(evm_env **)&jarg1; 
  arg2 = *(Callback **)&jarg2; 
  createVM(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_executeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jobject jarg9_) {
  jlong jresult = 0 ;
  evm_env *arg1 = (evm_env *) 0 ;
  enum evm_mode arg2 ;
  evm_uint256be arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  size_t arg5 ;
  int64_t arg6 ;
  uint8_t *arg7 = (uint8_t *) 0 ;
  size_t arg8 ;
  evm_uint256be arg9 ;
  evm_uint256be *argp3 ;
  evm_uint256be *argp9 ;
  evm_result result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg9_;
  arg1 = *(evm_env **)&jarg1; 
  arg2 = (enum evm_mode)jarg2; 
  argp3 = *(evm_uint256be **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null evm_uint256be");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(uint8_t **)&jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (int64_t)jarg6; 
  arg7 = *(uint8_t **)&jarg7; 
  arg8 = (size_t)jarg8; 
  argp9 = *(evm_uint256be **)&jarg9; 
  if (!argp9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null evm_uint256be");
    return 0;
  }
  arg9 = *argp9; 
  result = executeCode(arg1,arg2,arg3,(unsigned char const *)arg4,arg5,arg6,(unsigned char const *)arg7,arg8,arg9);
  *(evm_result **)&jresult = new evm_result((const evm_result &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_releaseResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  evm_env *arg1 = (evm_env *) 0 ;
  evm_result *arg2 = (evm_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(evm_env **)&jarg1; 
  arg2 = *(evm_result **)&jarg2; 
  releaseResult(arg1,(evm_result const *)arg2);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_releaseVM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  evm_env *arg1 = (evm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  releaseVM(arg1);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_releaseEnv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  evm_env *arg1 = (evm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  releaseEnv(arg1);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_interrupt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  evm_env *arg1 = (evm_env *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_env **)&jarg1; 
  interrupt(arg1);
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_maxTotalMemory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int64_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  maxTotalMemory = arg1;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_maxTotalMemory_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int64_t)maxTotalMemory;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_new_1ByteArray(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ByteArray *)new_ByteArray(arg1);
  *(ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_delete_1ByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ByteArray *arg1 = (ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ByteArray **)&jarg1; 
  delete_ByteArray(arg1);
}


SWIGEXPORT jshort JNICALL Java_com_nuco_nvmjit_NvmJITJNI_ByteArray_1getitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  ByteArray *arg1 = (ByteArray *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ByteArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)ByteArray_getitem(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_ByteArray_1setitem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  ByteArray *arg1 = (ByteArray *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ByteArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  ByteArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_ByteArray_1cast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ByteArray *arg1 = (ByteArray *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ByteArray **)&jarg1; 
  result = (unsigned char *)ByteArray_cast(arg1);
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_ByteArray_1frompointer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned char **)&jarg1; 
  result = (ByteArray *)ByteArray_frompointer(arg1);
  *(ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1SUCCESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_SUCCESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1FAILURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_FAILURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1OUT_1OF_1GAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_OUT_OF_GAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1BAD_1INSTRUCTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_BAD_INSTRUCTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1BAD_1JUMP_1DESTINATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_BAD_JUMP_DESTINATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1STACK_1OVERFLOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_STACK_OVERFLOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1STACK_1UNDERFLOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_STACK_UNDERFLOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1REVERT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result_code)EVM_REVERT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1SLOAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_SLOAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_ADDRESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CALLER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_CALLER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1ORIGIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_ORIGIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1GAS_1PRICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_GAS_PRICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1COINBASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_COINBASE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1DIFFICULTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_DIFFICULTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1GAS_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_GAS_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1TIMESTAMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_TIMESTAMP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CODE_1BY_1ADDRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_CODE_BY_ADDRESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CODE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_CODE_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1BALANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_BALANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1BLOCKHASH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_BLOCKHASH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1ACCOUNT_1EXISTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_ACCOUNT_EXISTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CALL_1DEPTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_query_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_query_key)EVM_CALL_DEPTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1SSTORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_update_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_update_key)EVM_SSTORE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1LOG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_update_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_update_key)EVM_LOG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1SELFDESTRUCT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_update_key result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_update_key)EVM_SELFDESTRUCT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_call_kind result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_call_kind)EVM_CALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1DELEGATECALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_call_kind result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_call_kind)EVM_DELEGATECALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CALLCODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_call_kind result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_call_kind)EVM_CALLCODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CREATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_call_kind result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_call_kind)EVM_CREATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1FRONTIER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_mode result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_mode)EVM_FRONTIER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1HOMESTEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_mode result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_mode)EVM_HOMESTEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1ANTI_1DOS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_mode result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_mode)EVM_ANTI_DOS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1CLEARING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_mode result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_mode)EVM_CLEARING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_EVM_1METROPOLIS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  evm_mode result;
  
  (void)jenv;
  (void)jcls;
  result = (evm_mode)EVM_METROPOLIS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1uint160be_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_uint160be *arg1 = (evm_uint160be *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_uint160be **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->bytes;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1uint160be_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_uint160be *arg1 = (evm_uint160be *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_uint160be **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->bytes);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_new_1evm_1uint160be(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  evm_uint160be *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (evm_uint160be *)new evm_uint160be();
  *(evm_uint160be **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_delete_1evm_1uint160be(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  evm_uint160be *arg1 = (evm_uint160be *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(evm_uint160be **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1uint256be_1bytes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_uint256be *arg1 = (evm_uint256be *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_uint256be **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->bytes;
    for (ii = 0; ii < (size_t)32; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1uint256be_1bytes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_uint256be *arg1 = (evm_uint256be *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_uint256be **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->bytes);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_new_1evm_1uint256be(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  evm_uint256be *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (evm_uint256be *)new evm_uint256be();
  *(evm_uint256be **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_delete_1evm_1uint256be(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  evm_uint256be *arg1 = (evm_uint256be *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(evm_uint256be **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1int64_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_variant *arg1 = (evm_variant *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->int64 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1int64_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_variant *arg1 = (evm_variant *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  result = (int64_t) ((arg1)->int64);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1uint256be_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  evm_variant *arg1 = (evm_variant *) 0 ;
  evm_uint256be *arg2 = (evm_uint256be *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(evm_variant **)&jarg1; 
  arg2 = *(evm_uint256be **)&jarg2; 
  if (arg1) (arg1)->uint256be = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1uint256be_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_variant *arg1 = (evm_variant *) 0 ;
  evm_uint256be *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  result = (evm_uint256be *)& ((arg1)->uint256be);
  *(evm_uint256be **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1address_1padding_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_variant *arg1 = (evm_variant *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->address_padding;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1address_1padding_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_variant *arg1 = (evm_variant *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->address_padding);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  evm_variant *arg1 = (evm_variant *) 0 ;
  evm_uint160be *arg2 = (evm_uint160be *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(evm_variant **)&jarg1; 
  arg2 = *(evm_uint160be **)&jarg2; 
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_variant *arg1 = (evm_variant *) 0 ;
  evm_uint160be *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  result = (evm_uint160be *)& ((arg1)->address);
  *(evm_uint160be **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_variant *arg1 = (evm_variant *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->data = (uint8_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_variant *arg1 = (evm_variant *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  result = (uint8_t *) ((arg1)->data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1data_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_variant *arg1 = (evm_variant *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->data_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1variant_1data_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_variant *arg1 = (evm_variant *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_variant **)&jarg1; 
  result =  ((arg1)->data_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_new_1evm_1variant(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  evm_variant *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (evm_variant *)new evm_variant();
  *(evm_variant **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_delete_1evm_1variant(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  evm_variant *arg1 = (evm_variant *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(evm_variant **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  evm_result *arg1 = (evm_result *) 0 ;
  enum evm_result_code arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  arg2 = (enum evm_result_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT jint JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  evm_result *arg1 = (evm_result *) 0 ;
  enum evm_result_code result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  result = (enum evm_result_code) ((arg1)->code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1gas_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_result *arg1 = (evm_result *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->gas_left = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1gas_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_result *arg1 = (evm_result *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  result = (int64_t) ((arg1)->gas_left);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1output_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_result *arg1 = (evm_result *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  if (arg1) (arg1)->output_data = (uint8_t const *)arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1output_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_result *arg1 = (evm_result *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  result = (uint8_t *) ((arg1)->output_data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1output_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_result *arg1 = (evm_result *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->output_size = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1output_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_result *arg1 = (evm_result *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  result =  ((arg1)->output_size);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1release_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_result *arg1 = (evm_result *) 0 ;
  evm_release_result_fn arg2 ;
  evm_release_result_fn *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  argp2 = *(evm_release_result_fn **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null evm_release_result_fn");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->release = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1release_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_result *arg1 = (evm_result *) 0 ;
  evm_release_result_fn result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  result =  ((arg1)->release);
  *(evm_release_result_fn **)&jresult = new evm_release_result_fn((const evm_release_result_fn &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1error_1message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  evm_result *arg1 = (evm_result *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->error_message = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->error_message, (const char *)arg2);
    } else {
      arg1->error_message = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1error_1message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  evm_result *arg1 = (evm_result *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  result = (char *) ((arg1)->error_message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1internal_1memory_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  evm_result *arg1 = (evm_result *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->internal_memory = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_evm_1result_1internal_1memory_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  evm_result *arg1 = (evm_result *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(evm_result **)&jarg1; 
  result = (void *) ((arg1)->internal_memory);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_nuco_nvmjit_NvmJITJNI_new_1evm_1result(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  evm_result *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (evm_result *)new evm_result();
  *(evm_result **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_delete_1evm_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  evm_result *arg1 = (evm_result *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(evm_result **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_nuco_nvmjit_NvmJITJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[3] = {
    {
      "SwigDirector_Callback_doQuery", "(Lcom/nuco/nvmjit/Callback;JIJ)V" 
    },
    {
      "SwigDirector_Callback_doUpdate", "(Lcom/nuco/nvmjit/Callback;IJJ)V" 
    },
    {
      "SwigDirector_Callback_doCall", "(Lcom/nuco/nvmjit/Callback;IJJJJJJJ)J" 
    }
  };
  Swig::jclass_NvmJITJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_NvmJITJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

